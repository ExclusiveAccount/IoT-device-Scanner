// Global variables
let logs = [];
let scanHistory = [];
let currentHistoryPage = 1;
let itemsPerHistoryPage = 5;
let runningTools = [];

// Initialize on document load
document.addEventListener('DOMContentLoaded', function() {
    console.log('Document loaded - initializing IoT Scanner dashboard');
    
    // Initialize the dashboard elements
    initializeDashboard();
    
    // Load and display scan history
    loadScanHistory();
    displayScanHistory();
    
    // Initialize logs with sample data
    initializeLogs();
    
    // Set up event listeners for UI interactions
    setupEventListeners();
    
    // Add initial log entry
    addLogEntry('INFO', 'System', 'IoT Scanner dashboard initialized');
});

// Initialize the dashboard components
function initializeDashboard() {
    // Mobile menu toggle
    const burger = document.querySelector('.navbar-burger');
    const menu = document.querySelector('.navbar-menu');
    
    if (burger && menu) {
        burger.addEventListener('click', () => {
            burger.classList.toggle('is-active');
            menu.classList.toggle('is-active');
        });
    }
    
    // Set up tab navigation
    setupTabNavigation();
}

// Function to show scan modal
function showScanModal() {
    // Check if modal already exists
    let modal = document.getElementById('scanModal');
    
    // If modal doesn't exist, create it
    if (!modal) {
        modal = document.createElement('div');
        modal.id = 'scanModal';
        modal.className = 'modal';
        modal.innerHTML = `
            <div class="modal-background"></div>
            <div class="modal-card">
                <header class="modal-card-head">
                    <p class="modal-card-title">Start Network Scan</p>
                    <button class="delete" aria-label="close"></button>
                </header>
                <section class="modal-card-body">
                    <div class="field">
                        <label class="label">IP Range</label>
                        <div class="control">
                            <input id="ipRangeInput" class="input" type="text" placeholder="192.168.1.0/24" value="192.168.1.0/24">
                        </div>
                        <p class="help">Specify the network range to scan in CIDR notation</p>
                    </div>
                    
                    <div class="field">
                        <label class="label">Scan Options</label>
                        <div class="control">
                            <label class="checkbox">
                                <input id="fullScanCheck" type="checkbox">
                                Full scan (includes vulnerability checks)
                            </label>
                        </div>
                    </div>
                    
                    <div class="field">
                        <label class="label">Concurrency</label>
                        <div class="control">
                            <input id="threadsInput" class="input" type="number" min="1" max="100" value="10">
                        </div>
                        <p class="help">Number of concurrent scan threads</p>
                    </div>
                    
                    <div class="notification is-warning">
                        <strong>Note:</strong> Scanning requires appropriate permissions. Make sure you have authorization to scan the specified network.
                    </div>
                </section>
                <footer class="modal-card-foot">
                    <button id="startScanConfirmBtn" class="button is-primary">Start Scan</button>
                    <button id="cancelScanBtn" class="button">Cancel</button>
                </footer>
            </div>
        `;
        document.body.appendChild(modal);
        
        // Add event listeners to modal
        const closeBtn = modal.querySelector('.delete');
        const cancelBtn = modal.querySelector('#cancelScanBtn');
        const startBtn = modal.querySelector('#startScanConfirmBtn');
        
        // Close modal function
        const closeModal = () => {
            modal.classList.remove('is-active');
        };
        
        // Close button event
        closeBtn.addEventListener('click', closeModal);
        cancelBtn.addEventListener('click', closeModal);
        
        // Start scan button event
        startBtn.addEventListener('click', function() {
            const ipRange = document.getElementById('ipRangeInput').value;
            const fullScan = document.getElementById('fullScanCheck').checked;
            const threads = document.getElementById('threadsInput').value;
            
            // Validate input
            if (!ipRange) {
                alert('Please enter a valid IP range');
                return;
            }
            
            // Send scan request
            startNetworkScan(ipRange, fullScan, threads);
            closeModal();
        });
    }
    
    // Show the modal
    modal.classList.add('is-active');
}

// Function to start network scan
function startNetworkScan(ipRange, fullScan, threads) {
    // Show loading indicator
    const notification = document.createElement('div');
    notification.className = 'notification is-info scan-notification';
    notification.innerHTML = `
        <button class="delete"></button>
        <p><strong>Scan in progress</strong></p>
        <p>Scanning network: ${ipRange}</p>
        <progress class="progress is-small is-primary" max="100">15%</progress>
    `;
    
    // Add to page
    document.querySelector('.dashboard-content').prepend(notification);
    
    // Add close button functionality
    notification.querySelector('.delete').addEventListener('click', function() {
        notification.remove();
    });
    
    // Send API request to start scan
    fetch('/api/start-scan', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            ipRange: ipRange,
            fullScan: fullScan,
            threads: parseInt(threads),
        }),
    })
    .then(response => response.json())
    .then(data => {
        // Update notification
        if (data.success) {
            notification.classList.remove('is-info');
            notification.classList.add('is-success');
            notification.innerHTML = `
                <button class="delete"></button>
                <p><strong>Scan started successfully!</strong></p>
                <p>Scan ID: ${data.scanId || 'N/A'}</p>
                <p>Results will appear automatically when complete.</p>
            `;
            
            // After 5 seconds, check for results
            setTimeout(function() {
                checkScanResults(data.scanId);
            }, 5000);
        } else {
            notification.classList.remove('is-info');
            notification.classList.add('is-danger');
            notification.innerHTML = `
                <button class="delete"></button>
                <p><strong>Scan failed to start</strong></p>
                <p>${data.error || 'Unknown error occurred'}</p>
            `;
        }
        
        // Add close button functionality again
        notification.querySelector('.delete').addEventListener('click', function() {
            notification.remove();
        });
    })
    .catch(error => {
        console.error('Error starting scan:', error);
        notification.classList.remove('is-info');
        notification.classList.add('is-danger');
        notification.innerHTML = `
            <button class="delete"></button>
            <p><strong>Error starting scan</strong></p>
            <p>Could not communicate with the server. Please try again.</p>
        `;
        
        // Add close button functionality again
        notification.querySelector('.delete').addEventListener('click', function() {
            notification.remove();
        });
    });
}

// Function to check scan results
function checkScanResults(scanId) {
    fetch('/api/scan-status?id=' + encodeURIComponent(scanId))
        .then(response => response.json())
        .then(data => {
            if (data.status === 'completed') {
                // Refresh the page to show new results
                window.location.reload();
                // Add to scan history
                addScanToHistory(scanId, data);
                // Log completion
                addLogEntry('INFO', 'Scanner', `Scan ${scanId} completed successfully`);
            } else if (data.status === 'running') {
                // Log progress
                addLogEntry('INFO', 'Scanner', `Scan ${scanId} in progress (${data.progress || 0}%)`);
                // Update tool status
                updateRunningTools(scanId, 'Scan', data.progress || 0);
                // Check again after 5 seconds
                setTimeout(function() {
                    checkScanResults(scanId);
                }, 5000);
            }
        })
        .catch(error => {
            console.error('Error checking scan status:', error);
            addLogEntry('ERROR', 'System', `Failed to check scan status: ${error.message}`);
        });
}

// Scan History Management
let scanHistory = [];
let currentHistoryPage = 1;
const itemsPerHistoryPage = 10;

// Load scan history
function loadScanHistory() {
    // In a real implementation, this would fetch from the server
    // For now, we'll use localStorage or simulated data
    const savedHistory = localStorage.getItem('scanHistory');
    if (savedHistory) {
        try {
            scanHistory = JSON.parse(savedHistory);
        } catch (e) {
            console.error('Error parsing scan history:', e);
            scanHistory = [];
        }
    } else {
        // Simulate some history if none exists
        simulateScanHistory();
    }
    displayScanHistory();
}

// Simulate scan history for demonstration
function simulateScanHistory() {
    const now = new Date();
    for (let i = 0; i < 5; i++) {
        const scanDate = new Date(now);
        scanDate.setDate(scanDate.getDate() - i);
        
        scanHistory.push({
            id: 'SCAN-' + (1000 + i),
            timestamp: scanDate.toISOString(),
            range: '192.168.1.0/24',
            devicesFound: Math.floor(Math.random() * 10) + 2,
            vulnerabilities: Math.floor(Math.random() * 8),
            duration: Math.floor(Math.random() * 120) + 30 + 's',
            status: 'completed'
        });
    }
    saveScanHistory();
}

// Save scan history to localStorage
function saveScanHistory() {
    localStorage.setItem('scanHistory', JSON.stringify(scanHistory));
}

// Add a new scan to history
function addScanToHistory(scanId, data) {
    const scan = {
        id: scanId,
        timestamp: new Date().toISOString(),
        range: data.range || '192.168.1.0/24',
        devicesFound: data.devicesFound || 0,
        vulnerabilities: data.vulnerabilitiesFound || 0,
        duration: data.duration || '0s',
        status: data.status || 'completed'
    };
    
    // Create download link
    const a = document.createElement('a');
    a.href = url;
    a.download = `iot_scanner_logs_${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    
    // Trigger download and clean up
    a.click();
    setTimeout(function() {
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    }, 0);
    
    // Log the export action
}

// Function to export logs as CSV
function exportLogs() {
    // Get the currently filtered logs or all logs if no filter
    const logsToExport = window.currentFilteredLogs || logs;
    
    if (!logsToExport || logsToExport.length === 0) {
        addLogEntry('WARNING', 'System', 'No logs to export');
        return;
    }
    
    // Create CSV header
    let csv = 'Timestamp,Level,Component,Message\n';
    
    // Add each log entry
    logsToExport.forEach(log => {
        // Format timestamp
        const date = new Date(log.timestamp);
        const formattedTime = date.toISOString();
        
        // Escape any commas in the message
        const escapedMessage = log.message.replace(/"/g, '""');
        
        // Add the row
        csv += `"${formattedTime}","${log.level}","${log.component}","${escapedMessage}"\n`;
    });
    
    // Create blob and download link
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    
    // Create download link
    const a = document.createElement('a');
    a.href = url;
    const timestamp = new Date().toISOString().replace(/[:\.]/g, '-');
    a.download = `iot-scanner-logs-${timestamp}.csv`;
    document.body.appendChild(a);
    
    // Trigger download and clean up
    a.click();
    setTimeout(function() {
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    }, 0);
    
    // Log the export action
    addLogEntry('INFO', 'System', `Exported ${logsToExport.length} log entries to CSV`);
}

// Function to setup navigation between dashboard sections
function setupNavigation() {
    const navItems = document.querySelectorAll('.menu-list a');
    const sections = document.querySelectorAll('.dashboard-section');
    
    navItems.forEach(item => {
        item.addEventListener('click', function() {
            // Get the section id from the nav item id
            const targetId = this.id.replace('nav-', 'section-');
            const targetSection = document.getElementById(targetId);
            
            if (targetSection) {
                // Hide all sections
                sections.forEach(section => {
                    section.classList.add('is-hidden');
                });
                
                // Show the target section
                targetSection.classList.remove('is-hidden');
                
                // Update active nav item
                navItems.forEach(navItem => {
                    navItem.classList.remove('is-active');
                });
                this.classList.add('is-active');
                
                // Log the navigation
                const sectionName = this.textContent.trim();
                addLogEntry('INFO', 'UI', `Navigated to ${sectionName} section`);
            }
        });
    });
}
